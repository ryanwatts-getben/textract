name: Deploy Flask App to AWS EC2
on:
  push:
    branches:
      - main
env:
  APP_NAME: ${{ secrets.APP_NAME }}
  PORT: ${{ secrets.PORT }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
  AWS_UPLOAD_BUCKET_NAME: ${{ secrets.AWS_UPLOAD_BUCKET_NAME }}
  TEMPLATE_FILE_NAME: ${{ secrets.TEMPLATE_FILE_NAME }}
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  AWS_TEXTRACT_BUCKET_NAME: ${{ secrets.AWS_TEXTRACT_BUCKET_NAME }}
  PROMPT_BUCKET: ${{ secrets.PROMPT_BUCKET }}
  TEMPLATE_FILE: ${{ secrets.TEMPLATE_FILE }}
  MAX_WORKERS: ${{ secrets.MAX_WORKERS }}
  BILL_PROMPT_FILES: ${{ secrets.BILL_PROMPT_FILES }}
  RECORD_PROMPT_FILES: ${{ secrets.RECORD_PROMPT_FILES }}
  BILL_PROMPT_IMAGES: ${{ secrets.BILL_PROMPT_IMAGES }}
  RECORD_PROMPT_IMAGES: ${{ secrets.RECORD_PROMPT_IMAGES }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Install AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Add .env
        run: |
          echo "PORT=${{ secrets.PORT }}"  >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}"  >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}"  >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}"  >> .env
          echo "TEMPLATE_FILE_NAME=${{ secrets.TEMPLATE_FILE_NAME }}"  >> .env
          echo "ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}" >> .env
          echo "AWS_TEXTRACT_BUCKET_NAME=${{ secrets.AWS_TEXTRACT_BUCKET_NAME }}" >> .env
          echo "PROMPT_BUCKET=${{ secrets.PROMPT_BUCKET }}" >> .env
          echo "TEMPLATE_FILE=${{ secrets.TEMPLATE_FILE }}" >> .env
          echo "APP_NAME=${{secrets.APP_NAME}}" >> .env
          echo "MAX_WORKERS=${{ secrets.MAX_WORKERS }}" >> .env
          echo "BILL_PROMPT_FILES=${{ secrets.BILL_PROMPT_FILES }}" >> .env
          echo "RECORD_PROMPT_FILES=${{ secrets.RECORD_PROMPT_FILES }}" >> .env
          echo "BILL_PROMPT_IMAGES=${{ secrets.BILL_PROMPT_IMAGES }}" >> .env
          echo "RECORD_PROMPT_IMAGES=${{ secrets.RECORD_PROMPT_IMAGES }}" >> .env
          echo "AWS_UPLOAD_BUCKET_NAME=${{ secrets.AWS_UPLOAD_BUCKET_NAME }}" >> .env
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Clean Target Directory on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            rm -rf /var/www/${{secrets.APP_NAME}}/*
      - name: Transfer Files to AWS EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./*, **/*"
          target: "/var/www/${{secrets.APP_NAME}}"
      - name: Restart Application on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Navigate to application directory
            cd /var/www/${{ secrets.APP_NAME }}

            # Update package lists
            sudo apt-get update

            # Install necessary packages
            sudo apt-get install -y python3-venv nodejs npm

            # Install pm2 globally
            sudo npm install -g pm2

            # Create virtual environment
            python3 -m venv venv

            # Activate virtual environment
            source venv/bin/activate

            # Upgrade pip
            pip install --upgrade pip

            # Install dependencies
            pip install -r requirements.txt

            # Deactivate virtual environment (optional)
            deactivate

            # Delete the existing process if it exists, suppressing the error message
            pm2 delete --silent ${{ secrets.APP_NAME }} || true

            # Start the application using PM2 with the virtual environment's Python interpreter
            pm2 start "/var/www/${{ secrets.APP_NAME }}/app.py" \
              --name ${{ secrets.APP_NAME }} \
              --interpreter "/var/www/${{ secrets.APP_NAME }}/venv/bin/python" \
              --interpreter-args "-u" \
              -- --port ${{ secrets.PORT }}

            # Save the PM2 process list to synchronize it
            pm2 save
